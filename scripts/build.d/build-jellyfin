#!/bin/bash

set -o errexit
set -o xtrace

tagname="${1}"

builddir="/srv/jellyfin"
reponame="jellyfin"
repotype="server"

reposerver="repo1.jellyfin.org"

######
# HACK FOR STABLE RELEASES
######
do_dotnet2() {
    sudo apt purge -y dotnet-sdk-3.0 || true
    sudo apt autoremove -y || true
    sudo apt install -y dotnet-sdk-2.2 || true
}
do_dotnet3() {
    sudo apt purge -y dotnet-sdk-2.2 || true
    sudo apt autoremove -y || true
    sudo apt install -y dotnet-sdk-3.0 || true
}

do_dotnet2

echo "*** PREPARING REPOSITORY ***"
pushd ${builddir}

# Grab the source and init
./build ${reponame} --clone-only

pushd projects/${repotype}/${reponame}

git reset --hard HEAD
git clean -fd

# Check out the tag
git tag -d tags/${tagname} || true
git fetch --all
git checkout tags/${tagname}

# Initialize the submodule
git submodule update --init || true

# Perform nuget restore
dotnet restore --no-cache

popd

echo "*** BUILDING OS PACKAGES ***"
./build ${reponame}

echo "*** BUILDING NUGET PACKAGES ***"
/bin/bash ${builddir}/scripts/build.d/build-jellyfin-nuget

echo "*** GRABBING WINDOWS INSTALLER FROM AZURE ***"
installer_tmpdir="$( mktemp -d )"
azure_build_id="$( az pipelines runs list --branch release-10.4.z --pipeline-ids 1 --reason batchedCI --result succeeded --status completed --query-order QueueTimeDesc --top 1 | jq '.[].id' )"
az pipelines runs artifact download --artifact-name 'Jellyfin Server Setup' --path ${installer_tmpdir} --run-id ${azure_build_id} && \
mkdir -p bin/jellyfin/win-installer && \
mmv "${installer_tmpdir}/jellyfin_*_windows-*.exe" "bin/jellyfin/win-installer/jellyfin_${tagname}-#2.exe" && \
rm -rf ${installer_tmpdir} || \
echo "FAILED TO GRAB A WINDOWS EXE, FIX THIS MANUALLY PL0X."

echo "*** SYNCING OS PACKAGES TO REPO ***"
rsync -avz bin/${reponame}/ build@${reposerver}:/srv/incoming/${reponame}_${tagname}

echo "*** COLLECTING PACKAGES FOR REPO ***"
ssh build@${reposerver} "sudo /srv/collect-server.sh /srv/incoming/${reponame}_${tagname}"

echo "*** BUILDING DOCKER IMAGES ***"
/bin/bash ${builddir}/scripts/build.d/build-jellyfin-docker tag-name=${tagname} build-docker-manifests=yes

echo "*** UPLOADING BINARIES TO GITHUB RELEASE ***"
for dir in bin/${reponame}/*; do
    artifact_dir="$( awk -F'/' '{ print $NF }' <<<"${dir}" )"
    temp_dir="$( mktemp -d )"
    pushd ${dir}
    case ${artifact_dir} in
        debian-package-*)
            mmv "jellyfin_*_*.deb" "${temp_dir}/jellyfin_#1_debian-#2.deb"
            mmv "jellyfin_*_*.buildinfo" "${temp_dir}/jellyfin_#1_debian-#2.buildinfo" || true
        ;;  
        ubuntu-package-*)
            mmv "jellyfin_*_*.deb" "${temp_dir}/jellyfin_#1_ubuntu-#2.deb"
            mmv "jellyfin_*_*.buildinfo" "${temp_dir}/jellyfin_#1_ubuntu-#2.buildinfo" || true
        ;;  
        fedora-package-*|centos-package-*)
            rm *.src.rpm
            mv *.rpm "${temp_dir}/"
        ;;  
        linux-x64)
            mmv "jellyfin_*.portable.tar.gz" "${temp_dir}/jellyfin_#1_linux-amd64.tar.gz"
        ;;  
        macos)
            mmv "jellyfin_*.portable.tar.gz" "${temp_dir}/jellyfin_#1_macos.tar.gz"
        ;;  
        portable)
            mmv "jellyfin_*.portable.tar.gz" "${temp_dir}/jellyfin_#1_portable.tar.gz"
        ;;  
        win-x64)
            mmv "jellyfin_*.zip" "${temp_dir}/jellyfin_#1_windows-x64.zip"
        ;;  
        win-x86)
            mmv "jellyfin_*.zip" "${temp_dir}/jellyfin_#1_windows-x86.zip"
        ;;
        win-installer)
            mmv "jellyfin_*.exe" "${temp_dir}/jellyfin_#1_windows.exe"
        ;;
    esac
    # Upload the artifacts to the GitHub release
    for artifact in ${temp_dir}/*; do
        /bin/bash ${builddir}/scripts/upload-artifact "${reponame}" "${tagname}" "${artifact}"
    done
    popd
    rm -r ${temp_dir}
done

echo "*** CLEANING UP ***"
rm -r ${builddir}/bin/jellyfin
popd
docker image rm -f $( docker images -aq ) || true
exit 0

do_dotnet3
