#!/bin/bash

set -o errexit
set -o xtrace

tagname="${1}"

builddir="/srv/jellyfin"
reponame="jellyfin-ffmpeg"
repotype="ffmpeg"

pushd ${builddir}

# Grab the source and init
./build ${reponame} --clone-only

pushd projects/${repotype}/${reponame}

# Check out the tag
git tag -d tags/${tagname} || true
git fetch --all
git checkout tags/${tagname}

# Initialize the submodule
git submodule update --init

popd

# Build Docker packages
bash build-ffmpeg-docker ${tagname} build-docker-manifests=yes

# Build the packages
./build ${reponame}

# Copy the output to the repo server
rsync -avz bin/${reponame}/ build@repo.jellyfin.org:/srv/incoming/${reponame}_${tagname}

# Execute import job on repo server
ssh build@repo.jellyfin.org "sudo /srv/collect-ffmpeg.sh /srv/incoming/${reponame}_${tagname}"

# Upload artifacts to the GitHub release
for artifact in bin/${reponame}/*.{deb,buildinfo}; do
    if [[ -f ${artifact} ]]; then
        /bin/bash /srv/jellyfin/scripts/upload-artifact "${reponame}" "${tagname}" "${artifact}"
    fi
done

# Rebuild the latest Jellyfin Docker packages to use new ffmpeg Docker packages
bash build-jellyfin-docker latest build-docker-manifests=no

# Clean up
rm -r ${builddir}/bin/jellyfin-ffmpeg
popd
docker image ls | awk '{ print $3 }' | xargs docker image rm
exit 0
